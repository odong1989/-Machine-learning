{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 주피터 노트북 사용\n",
    " - numpy를 사용 : 데이터 사이언스에서 사용하는 중요한 패키지<br>\n",
    " - numpy 다음에는 <b style=\"color:red\">Pandas </b>를 배워서 데이터 전처리 작업을 한다.\n",
    " - css,html 태그를 활용하여 글씨를 설정할 수 있습니다(물론 초급정도의 수정만되지만)\n",
    " - <img>태그와 이미지 주소 복사를 활용하면 일일이 사진을 갖고 오는 수고를 않아도 됩니다.\n",
    "\n",
    " #명령어 메모\n",
    " 셀의 색깔이 파랑색일때(즉, 셀을 선택한상태)\n",
    " \n",
    " a : 위쪽에 셀 추가\n",
    " b : 아래쪽에 셀 추가\n",
    " m : 주석문 추가\n",
    " dd : 셀삭제(주의사항 : 되돌리기 안된다. 주의!!!)\n",
    " \n",
    " \n",
    " #file-DownloadAs에서 다운로드 받을 수 있도록 확장자도 정할 수 있음\n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"https://t1.daumcdn.net/cfile/tistory/993270495B18DDE322\">"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. 숫자 자료 처리하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "math1 = 89\n",
    "math2 = 95\n",
    "math3 = 75"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "m_sum = math1+math2+math3\n",
    "m_avg = m_sum/3 \n",
    "#sum이라고 하면 안됩니다. 예약어처럼 누군가 이미 쓰고 있기에 문제 발생."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "수학점수의 합계 : 259\n",
      "수학점수의 평균 : 86.33333333333333\n"
     ]
    }
   ],
   "source": [
    "print(\"수학점수의 합계 : {}\".format(m_sum))\n",
    "print(\"수학점수의 평균 : {}\".format(m_avg))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "math4=88"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "m_sum = math1+math2+math3+math4\n",
    "m_avg = m_sum/4\n",
    "#sum이라고 하면 안됩니다. 예약어처럼 누군가 이미 쓰고 있기에 문제 발생."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "수학점수의 합계 : 347\n",
      "수학점수의 평균 : 86.75\n"
     ]
    }
   ],
   "source": [
    "print(\"수학점수의 합계 : {}\".format(m_sum))\n",
    "print(\"수학점수의 평균 : {}\".format(m_avg))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2.리스트 자료형으로 처리"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[89, 95, 73]\n"
     ]
    }
   ],
   "source": [
    "mlist =[89,95,73]\n",
    "print(mlist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "m_sum1 =0\n",
    "m_avg1 =0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "수학점수의 합계 : 257\n",
      "수학점수의 평균 : 85.66666666666667\n"
     ]
    }
   ],
   "source": [
    "#for문을 이용하여 합계 평균 구하기\n",
    "for e in mlist :\n",
    "    m_sum1 += e\n",
    "m_avg = m_sum1/len(mlist)\n",
    "print(\"수학점수의 합계 : {}\".format(m_sum1))\n",
    "print(\"수학점수의 평균 : {}\".format(m_avg))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[89, 95, 73, 87]\n"
     ]
    }
   ],
   "source": [
    "mlist.append(87)\n",
    "print(mlist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "m_sum1 =0\n",
    "m_avg1 =0\n",
    "#초기화해야 제대로 나오니까"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "수학점수의 합계 : 344\n",
      "수학점수의 평균 : 86.0\n"
     ]
    }
   ],
   "source": [
    "#for문을 이용하여 합계 평균 구하기\n",
    "for e in mlist :\n",
    "    m_sum1 += e\n",
    "m_avg = m_sum1/len(mlist)\n",
    "print(\"수학점수의 합계 : {}\".format(m_sum1))\n",
    "print(\"수학점수의 평균 : {}\".format(m_avg))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##6/22 수업\n",
    "##문제발생 : 모든 학생의 점수를 1점씩 상향해서 올려줘야 하게 되었다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[89, 95, 74, 87]\n",
      "수학점수의 합계 : 345\n",
      "수학점수의 평균 : 86.25\n"
     ]
    }
   ],
   "source": [
    "#일단 데이터들 한칸에 모조리 처리(관리하기 쉽게)\n",
    "mlist =[89,95,74,87]\n",
    "print(mlist)\n",
    "m_sum1 =0\n",
    "m_avg1 =0\n",
    "for e in mlist :\n",
    "    m_sum1 += e\n",
    "m_avg = m_sum1/len(mlist)\n",
    "print(\"수학점수의 합계 : {}\".format(m_sum1))\n",
    "print(\"수학점수의 평균 : {}\".format(m_avg))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "#문제해결 위해 1점씩 더한다.\n",
    "#파이썬만의 독특한 문법이다.\n",
    "mlist_new = [e +1 for e in mlist]\n",
    "#for e in mlist:\n",
    "#    e = e + 1\n",
    "#이라고 한 것과 같다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "수학점수의 합계 : 349\n",
      "수학점수의 평균 : 87.25\n"
     ]
    }
   ],
   "source": [
    "m_sum2 =0\n",
    "m_avg2 =0\n",
    "for e in mlist_new :\n",
    "    m_sum2 += e\n",
    "m_avg2 = m_sum2/len(mlist_new)\n",
    "print(\"수학점수의 합계 : {}\".format(m_sum2))\n",
    "print(\"수학점수의 평균 : {}\".format(m_avg2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#1개반당 4명,3개반이 생김(기존4+추가8명)\n",
    "# 1반 : 10, 20, 30, 40\n",
    "# 2반 : 21, 22, 23, 24\n",
    "# 3반 : 31, 32, 33, 34"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[10, 20, 30, 40], [21, 22, 23, 24], [31, 32, 33, 34]]\n"
     ]
    }
   ],
   "source": [
    "#2차원 배열을 통해 관리를 합시다\n",
    "nested_mlist=[ [10, 20, 30, 40], [21, 22, 23, 24], [31, 32, 33, 34] ]\n",
    "print(nested_mlist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[11, 21, 31, 41], [22, 23, 24, 25], [32, 33, 34, 35]]\n"
     ]
    }
   ],
   "source": [
    "#2차원 배열상태서 각자 1점씩 올려줍시다. (솔직히 좋은 방법은 아니에요.-ㅂ-)(numpy를 쓰면 간단한데 안쓰면...)\n",
    "m_sum3 =0\n",
    "m_avg3 =0\n",
    "nested_mlist_new = []\n",
    "for tmp in nested_mlist : #2차원 배열에서 1줄을 뽑아온다.(#1개 반의 데이터를 긁어오는 셈)\n",
    "    tmpList = []\n",
    "    for e in tmp : #1개의 반의 데이터에서 각자 데이터를 입력한다.\n",
    "        tmpList.append(e+1)\n",
    "    nested_mlist_new.append(tmpList)\n",
    "            \n",
    "print(nested_mlist_new)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "###직접 해결해보기(1점씩 추가는 동일)(#순수한 파이선만으로 해결하려하면 쉽지 않지요)\n",
    "nested_mlist=[ [10, 20, 30, 40], [21, 22, 23, 24], [31, 32, 33, 34] ]\n",
    "print(nested_mlist)\n",
    "\n",
    "#힌트\n",
    "#mlist_new = [e +1 for e in mlist]\n",
    "#print(mlist_ㅜㄷㅈ)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "###Numpy 패키지로 해결하기\n",
    "#파이썬으로 만든 수치계산 패키지\n",
    "#데이터 분석 패키지\n",
    "#내부는 C로 만들어져 계산 속도가 매우 빠르다.\n",
    "#데이터 타입을 한가지만 허용.float형만 허용하는 경우가 많다.(수치연산용이니까)\n",
    "#array형태의 데이터를 주로 처리한다.(#도와줘요 선형대수학 -ㅂ-...;)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 1.5, 'hong', [1, 2, 3, 4]]\n"
     ]
    }
   ],
   "source": [
    "list1 = [1, 1.5, \"hong\", [1,2,3,4]]#파이썬 리스트\n",
    "print(list1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np #파이썬 배열을 이용하여 numpy 배열을 만든다"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1.18.1'"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#버전확인\n",
    "np.__version__#print()안써도 출력되긴한데, 정석으로 하려면\n",
    "#print(np.__version__)#으로 하는게 좋다"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "int64\n",
      "0\n",
      "()\n",
      "8\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "#단일 값 : 스칼라\n",
    "a=np.array(10)\n",
    "print(a)\n",
    "print(a.dtype) #a의 데이터 타입\n",
    "print(a.ndim)  # 차원\n",
    "print(a.shape) # ?행 ?열 인가\n",
    "print(a.nbytes)# 메모리가 얼마나 필요하니\n",
    "print(a.size)  #  요소의 개수가 몇개니?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 2 3 4]\n",
      "int64\n",
      "1\n",
      "(4,)\n",
      "32\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "#1차월 배열 \n",
    "b= np.array([1,2,3,4])\n",
    "print(b)#컴마(,)가 출력되지 않는다는게 특징이자 차이점\n",
    "print(b.dtype) #a의 데이터 타입\n",
    "print(b.ndim)  # 차원\n",
    "print(b.shape) # ?행 ?열 인가\n",
    "print(b.nbytes)# 메모리가 얼마나 필요하니\n",
    "print(b.size)  # 요소의 개수가 몇개니?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1  2  3  4]\n",
      " [ 5  6  7  8]\n",
      " [ 9 10 11 12]]\n",
      "int64\n",
      "2\n",
      "(3, 4)\n",
      "96\n",
      "12\n"
     ]
    }
   ],
   "source": [
    "#2차원 배열 (3x4)\n",
    "c = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])\n",
    "print(c)\n",
    "print(c.dtype) #a의 데이터 타입\n",
    "print(c.ndim)  # 차원\n",
    "print(c.shape) # ?행 ?열 인가\n",
    "print(c.nbytes)#\n",
    "print(c.size)  # 크기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[ 1  2  3  4]\n",
      "  [ 5  6  7  8]]\n",
      "\n",
      " [[ 9 10 11 12]\n",
      "  [13 14 15 16]]]\n",
      "int64\n",
      "3\n",
      "(2, 2, 4)\n",
      "128\n",
      "16\n"
     ]
    }
   ],
   "source": [
    "#3차원배열(2x2x4)\n",
    "d = np.array([[[1,2,3,4],[5,6,7,8]],[[9,10,11,12],[13,14,15,16]]])\n",
    "print(d)\n",
    "print(d.dtype) #a의 데이터 타입\n",
    "print(d.ndim)  # 차원\n",
    "print(d.shape) # ?행 ?열 인가\n",
    "print(d.nbytes)#\n",
    "print(d.size)  # 크기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1  2]\n",
      " [ 5  6]\n",
      " [ 9 10]]\n"
     ]
    }
   ],
   "source": [
    "#2차원 배열 (3x2)\n",
    "c_2 = np.array([[1,2],[5,6],[9,10]])\n",
    "print(c_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[10, 20, 30, 40], [21, 22, 23, 24], [31, 32, 33, 34]]\n"
     ]
    }
   ],
   "source": [
    "nested_mlist=[ [10, 20, 30, 40], [21, 22, 23, 24], [31, 32, 33, 34] ]\n",
    "print(nested_mlist)\n",
    "for tmp in nested_mlist : #2차원 배열에서 1줄을 뽑아온다.(#1개 반의 데이터를 긁어오는 셈)\n",
    "    tmpList = []\n",
    "    for e in tmp : #1개의 반의 데이터에서 각자 데이터를 입력한다.\n",
    "        tmpList.append(e+1)\n",
    "    nested_mlist_new.append(tmpList)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#numpy는 배열에 다른 타입의 데이터를 허용하지 않음을 직접 보자.\n",
    "test_ary_np.array([1,4,\"5\"]) # \"5\" : 문자열 5(숫자아님!) "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
